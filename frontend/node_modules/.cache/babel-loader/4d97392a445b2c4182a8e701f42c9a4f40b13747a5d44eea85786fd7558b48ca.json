{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add auth token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth functions\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await api.post(\"/login\", {\n      username: email,\n      // FastAPI expects 'username' field\n      password: password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      // Convert to form data for OAuth2\n      transformRequest: [data => {\n        const params = new URLSearchParams();\n        params.append(\"username\", data.username);\n        params.append(\"password\", data.password);\n        return params;\n      }]\n    });\n    return response.data;\n  },\n  register: async (email, password) => {\n    const response = await api.post(\"/users/\", {\n      email: email,\n      password: password\n    });\n    return response.data;\n  }\n};\n\n// Task functions\nexport const taskAPI = {\n  getTasks: async () => {\n    const response = await api.get(\"/tasks/\");\n    return response.data;\n  },\n  createTask: async taskData => {\n    const response = await api.post(\"/tasks/\", taskData);\n    return response.data;\n  },\n  updateTask: async (taskId, taskData) => {\n    const response = await api.put(`/tasks/${taskId}`, taskData);\n    return response.data;\n  },\n  deleteTask: async taskId => {\n    const response = await api.delete(`/tasks/${taskId}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","login","email","password","response","post","username","transformRequest","data","params","URLSearchParams","append","register","taskAPI","getTasks","get","createTask","taskData","updateTask","taskId","put","deleteTask","delete"],"sources":["C:/Users/Nikita/Documents/VS_code_Projects/taskfrontend/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add auth token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth functions\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    const response = await api.post(\r\n      \"/login\",\r\n      {\r\n        username: email, // FastAPI expects 'username' field\r\n        password: password,\r\n      },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        // Convert to form data for OAuth2\r\n        transformRequest: [\r\n          (data) => {\r\n            const params = new URLSearchParams();\r\n            params.append(\"username\", data.username);\r\n            params.append(\"password\", data.password);\r\n            return params;\r\n          },\r\n        ],\r\n      }\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  register: async (email, password) => {\r\n    const response = await api.post(\"/users/\", {\r\n      email: email,\r\n      password: password,\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Task functions\r\nexport const taskAPI = {\r\n  getTasks: async () => {\r\n    const response = await api.get(\"/tasks/\");\r\n    return response.data;\r\n  },\r\n\r\n  createTask: async (taskData) => {\r\n    const response = await api.post(\"/tasks/\", taskData);\r\n    return response.data;\r\n  },\r\n\r\n  updateTask: async (taskId, taskData) => {\r\n    const response = await api.put(`/tasks/${taskId}`, taskData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteTask: async (taskId) => {\r\n    const response = await api.delete(`/tasks/${taskId}`);\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAC7B,QAAQ,EACR;MACEC,QAAQ,EAAEJ,KAAK;MAAE;MACjBC,QAAQ,EAAEA;IACZ,CAAC,EACD;MACEZ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACD;MACAgB,gBAAgB,EAAE,CACfC,IAAI,IAAK;QACR,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;QACpCD,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAACF,QAAQ,CAAC;QACxCG,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAACL,QAAQ,CAAC;QACxC,OAAOM,MAAM;MACf,CAAC;IAEL,CACF,CAAC;IACD,OAAOL,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDI,QAAQ,EAAE,MAAAA,CAAOV,KAAK,EAAEC,QAAQ,KAAK;IACnC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,SAAS,EAAE;MACzCH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,OAAO,GAAG;EACrBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMV,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOX,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDQ,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,MAAMb,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,SAAS,EAAEY,QAAQ,CAAC;IACpD,OAAOb,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDU,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEF,QAAQ,KAAK;IACtC,MAAMb,QAAQ,GAAG,MAAMhB,GAAG,CAACgC,GAAG,CAAC,UAAUD,MAAM,EAAE,EAAEF,QAAQ,CAAC;IAC5D,OAAOb,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDa,UAAU,EAAE,MAAOF,MAAM,IAAK;IAC5B,MAAMf,QAAQ,GAAG,MAAMhB,GAAG,CAACkC,MAAM,CAAC,UAAUH,MAAM,EAAE,CAAC;IACrD,OAAOf,QAAQ,CAACI,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}